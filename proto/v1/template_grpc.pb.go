// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: proto/v1/template.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TemplateMultiTaskEvent_TaskOperation_FullMethodName = "/v1.TemplateMultiTaskEvent/TaskOperation"
)

// TemplateMultiTaskEventClient is the client API for TemplateMultiTaskEvent service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TemplateMultiTaskEventClient interface {
	TaskOperation(ctx context.Context, in *MultiTask, opts ...grpc.CallOption) (*Results, error)
}

type templateMultiTaskEventClient struct {
	cc grpc.ClientConnInterface
}

func NewTemplateMultiTaskEventClient(cc grpc.ClientConnInterface) TemplateMultiTaskEventClient {
	return &templateMultiTaskEventClient{cc}
}

func (c *templateMultiTaskEventClient) TaskOperation(ctx context.Context, in *MultiTask, opts ...grpc.CallOption) (*Results, error) {
	out := new(Results)
	err := c.cc.Invoke(ctx, TemplateMultiTaskEvent_TaskOperation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TemplateMultiTaskEventServer is the server API for TemplateMultiTaskEvent service.
// All implementations must embed UnimplementedTemplateMultiTaskEventServer
// for forward compatibility
type TemplateMultiTaskEventServer interface {
	TaskOperation(context.Context, *MultiTask) (*Results, error)
	mustEmbedUnimplementedTemplateMultiTaskEventServer()
}

// UnimplementedTemplateMultiTaskEventServer must be embedded to have forward compatible implementations.
type UnimplementedTemplateMultiTaskEventServer struct {
}

func (UnimplementedTemplateMultiTaskEventServer) TaskOperation(context.Context, *MultiTask) (*Results, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaskOperation not implemented")
}
func (UnimplementedTemplateMultiTaskEventServer) mustEmbedUnimplementedTemplateMultiTaskEventServer() {
}

// UnsafeTemplateMultiTaskEventServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TemplateMultiTaskEventServer will
// result in compilation errors.
type UnsafeTemplateMultiTaskEventServer interface {
	mustEmbedUnimplementedTemplateMultiTaskEventServer()
}

func RegisterTemplateMultiTaskEventServer(s grpc.ServiceRegistrar, srv TemplateMultiTaskEventServer) {
	s.RegisterService(&TemplateMultiTaskEvent_ServiceDesc, srv)
}

func _TemplateMultiTaskEvent_TaskOperation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiTask)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplateMultiTaskEventServer).TaskOperation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TemplateMultiTaskEvent_TaskOperation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplateMultiTaskEventServer).TaskOperation(ctx, req.(*MultiTask))
	}
	return interceptor(ctx, in, info, handler)
}

// TemplateMultiTaskEvent_ServiceDesc is the grpc.ServiceDesc for TemplateMultiTaskEvent service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TemplateMultiTaskEvent_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.TemplateMultiTaskEvent",
	HandlerType: (*TemplateMultiTaskEventServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TaskOperation",
			Handler:    _TemplateMultiTaskEvent_TaskOperation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/v1/template.proto",
}
